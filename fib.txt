;	Neil Hanlon, Chris Chevialer
;	COMP 278
;	Joey Lawrance

;Custom source code for fibonacci, C++ based
;int fib(1), int fibPrev(0), int temp(0)
;int main()
;	{
;		for(int i = 0; i < 10; i++)
;			{
;				temp = fib
;				fib = fib + fibPrev;
;				fibPrev = temp;
;			}
;		return 0;
;	}

;Opcode is the first nibble (hex digit)
;Destination or source register is the second nibble (hex digit)
;The last byte is either two registers or a literal address
;Also, make sure CPU works before using.
;STOR function doesn't work properly in this CPU

;Translate to equivalent code
00	fib = RAM[0x50]			;register a
01	fibPrev = RAM[0x51]		;register b
02	temp = RAM[0x52]			;register c
03	i = 1;					;register 1
04  fibPrev = 1
05  temp = fib
06  fib = fib + fibPrev
07  fibPrev = temp
08  i = i + 1
09  if(i < 10) goto 05
0a  ;DONE


;Translate to Assembly Code

00  LOAD Ra, 0x50 ;fib
01  LOAD Rb, 0x51 ;fibprev
02  LOAD Rc, 0x52 ;temp
03  MOV R1, 01
04  JZE Rb, 0a
05  MOV Rc, Rb
06  ADD Ra, Ra, Rb
07  MOV Rb, Rc
08  JZL R1, 0a
09  ;DONE
0a  MOV Rb, 01
0b  JZN R0, 05

;Translate to Machine Code
00  ca50
01  cb51
02  cc52
03  7101
04  8b0a
05  7c50
06  0aab
07  7b52
08  91


;Translate to Machine Code
00	ca50
01	cb51
02	7c60	;set 4 locations to 1, 2, 3, 4, sum should be 10, rather 0x0a
03	7101	
04	8b0b
05	0dc0
06	dd00	;last two bits can be anything for opcode d
07	0cc1
08	0aad
09	1bb1
0a	ab05
0b	0000

;Translating an array using pointer method
;	array[i]
;	*(array+i)
;	array = 0x50
;	i = 2
;	arrayi = array + i // 0x50 + 2 = 0x52
;	LOAD arrayi